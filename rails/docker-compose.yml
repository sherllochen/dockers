version: '3.4'

services:
  app: &app
    build:
      context: .
      dockerfile: ./.dockerdev/rails/Dockerfile
      args:
        RUBY_VERSION: '2.6.3'
        RAILS_VERSION: '5.2.0'
        PG_MAJOR: '11'
        NODE_MAJOR: '11'
        YARN_VERSION: '1.13.0'
        BUNDLER_VERSION: '2.0.2'
        WORKDIR: '/app'
    image: sherllo/rails:1.0.0
    tmpfs:
      - /tmp

  backend: &backend
    <<: *app
    stdin_open: true
    tty: true
    volumes:
      - .:/app:cached
      - rails_cache:/app/tmp/cache
      - bundle:/app/bundle
      - node_modules:/app/node_modules
      - packs:/app/public/packs
      - .dockerdev/.psqlrc:/root/.psqlrc:ro
    environment:
      - NODE_ENV=development
      - RAILS_ENV=${RAILS_ENV:-development}
      - REDIS_URL=redis://redis:6379/
      # comment out when not using postgres
      # - DATABASE_URL=postgres://postgres:postgres@postgres:5432
      - BOOTSNAP_CACHE_DIR=/bundle/bootsnap
      - WEBPACKER_DEV_SERVER_HOST=webpacker
      - WEB_CONCURRENCY=1
      - HISTFILE=/app/log/.bash_history
      # comment out when not using postgres
      # - PSQL_HISTFILE=/app/log/.psql_history
      - EDITOR=vi
    depends_on:
      # comment out when not using MySQL
      - mysql
      # comment out when not using postgres
      #- postgres
      - redis
      - webpacker
      - nginx

  nginx:
    build:
      context: .
      dockerfile: .dockerdev/nginx/Dockerfile
      args:
        RUBY_VERSION: '2.6.3'
        NODE_MAJOR: '11'
        YARN_VERSION: '1.13.0'
        BUNDLER_VERSION: '2.0.2'
        WORKDIR: '/app'
    image: sherllo/nginx:1.0.0
    stdin_open: true
    tty: true
    ports:
      # for web
      - '80:80'
      # for deploy through ssh using Capistrano, must be same with port config in sshd_config
      - '8888:8888'
#    depends_on:
#      # comment out when not using MySQL
#      - mysql
#      # comment out when not using postgres
#      #- postgres
#      - redis
#      - webpacker

  # docker-compose run --service-ports debug
  debug:
    <<: *backend
    command: /bin/bash
    ports:
      - '3000:3000'
      - '3002:3002'

  # docker-compose run --service-ports production
  # ready for deploying using Capistrano
  # deploy user is 'deploy' and password is 'deploy'. Can be changed in Dockerfile
  # app path is '/home/deploy/app'
  production:
    <<: *backend
    command: /bin/bash

  # docker-compose run --service-ports rails
  dev:
    <<: *backend
    command: bundle exec rails server -b 0.0.0.0
    ports:
      - '3000:3000'

  sidekiq:
    <<: *backend
    command: bundle exec sidekiq -C config/sidekiq.yml

  postgres:
    image: postgres:11.1
    volumes:
      - .psqlrc:/root/.psqlrc:ro
      - postgres:/var/lib/postgresql/data
      - ./log:/root/log:cached
    environment:
      - PSQL_HISTFILE=/root/log/.psql_history
    ports:
      - 5432

  mysql:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: 'db'
      # So you don't have to use root, but you can if you like
      MYSQL_USER: 'user'
      # You can use whatever password you like
      MYSQL_PASSWORD: 'password'
      # Password for root access
      MYSQL_ROOT_PASSWORD: 'password'
    ports:
      - '3306:3306'
    expose:
      - '3306'
    volumes:
      - mysql-db:/var/lib/mysql

  redis:
    image: redis:3.2-alpine
    volumes:
      - redis:/data
    ports:
      - 6379

  # docker-compose run --service-ports webpacker
  webpacker:
    <<: *app
    command: ./bin/webpack-dev-server
    ports:
      - '3035:3035'
    volumes:
      - .:/app:cached
      - bundle:/app/bundle
      - node_modules:/app/node_modules
      - packs:/app/public/packs
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - RAILS_ENV=${RAILS_ENV:-development}
      - WEBPACKER_DEV_SERVER_HOST=0.0.0.0

volumes:
  mysql-db:
  postgres:
  redis:
  bundle:
  node_modules:
  rails_cache:
  packs: